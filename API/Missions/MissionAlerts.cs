// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var output = Output.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Output
    {
        [JsonProperty("missionAlerts")]
        public MissionAlert[] MissionAlerts { get; set; }

        [JsonProperty("missions")]
        public Mission[] Missions { get; set; }

        [JsonProperty("theaters")]
        public Theater[] Theaters { get; set; }
    }

    public partial class MissionAlert
    {
        [JsonProperty("availableMissionAlerts")]
        public AvailableMissionAlert[] AvailableMissionAlerts { get; set; }

        [JsonProperty("nextRefresh")]
        public string NextRefresh { get; set; }

        [JsonProperty("theaterId")]
        public string TheaterId { get; set; }
    }

    public partial class AvailableMissionAlert
    {
        [JsonProperty("availableUntil")]
        public string AvailableUntil { get; set; }

        [JsonProperty("categoryName")]
        public AvailableMissionAlertCategoryName CategoryName { get; set; }

        [JsonProperty("missionAlertGuid")]
        public string MissionAlertGuid { get; set; }

        [JsonProperty("missionAlertModifiers", NullValueHandling = NullValueHandling.Ignore)]
        public MissionAlertModifiers MissionAlertModifiers { get; set; }

        [JsonProperty("missionAlertRewards")]
        public MissionAlertRewards MissionAlertRewards { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("spreadDataName")]
        public SpreadDataName SpreadDataName { get; set; }

        [JsonProperty("tileIndex")]
        public long TileIndex { get; set; }

        [JsonProperty("totalSpreadRefreshes")]
        public long TotalSpreadRefreshes { get; set; }
    }

    public partial class MissionAlertModifiers
    {
        [JsonProperty("items")]
        public MissionAlertModifiersItem[] Items { get; set; }

        [JsonProperty("tierGroupName")]
        public string TierGroupName { get; set; }
    }

    public partial class MissionAlertModifiersItem
    {
        [JsonProperty("itemType")]
        public string ItemType { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class MissionAlertRewards
    {
        [JsonProperty("items")]
        public MissionAlertRewardsItem[] Items { get; set; }

        [JsonProperty("tierGroupName")]
        public string TierGroupName { get; set; }
    }

    public partial class MissionAlertRewardsItem
    {
        [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [JsonProperty("itemType")]
        public string ItemType { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("Alteration")]
        public Alteration Alteration { get; set; }
    }

    public partial class Alteration
    {
        [JsonProperty("LootTierGroup")]
        public string LootTierGroup { get; set; }

        [JsonProperty("Tier")]
        public long Tier { get; set; }
    }

    public partial class Mission
    {
        [JsonProperty("availableMissions")]
        public AvailableMission[] AvailableMissions { get; set; }

        [JsonProperty("nextRefresh")]
        public string NextRefresh { get; set; }

        [JsonProperty("theaterId")]
        public string TheaterId { get; set; }
    }

    public partial class AvailableMission
    {
        [JsonProperty("availableUntil")]
        public string AvailableUntil { get; set; }

        [JsonProperty("bonusMissionRewards", NullValueHandling = NullValueHandling.Ignore)]
        public MissionAlertModifiers BonusMissionRewards { get; set; }

        [JsonProperty("missionDifficultyInfo")]
        public DifficultyInfo MissionDifficultyInfo { get; set; }

        [JsonProperty("missionGenerator")]
        public string MissionGenerator { get; set; }

        [JsonProperty("missionGuid")]
        public string MissionGuid { get; set; }

        [JsonProperty("missionRewards")]
        public MissionAlertModifiers MissionRewards { get; set; }

        [JsonProperty("overrideMissionRewards")]
        public OverrideMissionRewards OverrideMissionRewards { get; set; }

        [JsonProperty("tileIndex")]
        public long TileIndex { get; set; }
    }

    public partial class DifficultyInfo
    {
        [JsonProperty("dataTable")]
        public string DataTable { get; set; }

        [JsonProperty("rowName")]
        public string RowName { get; set; }
    }

    public partial class OverrideMissionRewards
    {
        [JsonProperty("Endurance", NullValueHandling = NullValueHandling.Ignore)]
        public MissionAlertModifiers Endurance { get; set; }

        [JsonProperty("Wargames", NullValueHandling = NullValueHandling.Ignore)]
        public MissionAlertModifiers Wargames { get; set; }
    }

    public partial class Theater
    {
        [JsonProperty("bHideLikeTestTheater")]
        public bool BHideLikeTestTheater { get; set; }

        [JsonProperty("bIsTestTheater")]
        public bool BIsTestTheater { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }

        [JsonProperty("displayName")]
        public DisplayName DisplayName { get; set; }

        [JsonProperty("missionRewardNamedWeightsRowName")]
        public string MissionRewardNamedWeightsRowName { get; set; }

        [JsonProperty("regions")]
        public Region[] Regions { get; set; }

        [JsonProperty("requiredEventFlag")]
        public string RequiredEventFlag { get; set; }

        [JsonProperty("runtimeInfo")]
        public RuntimeInfo RuntimeInfo { get; set; }

        [JsonProperty("theaterSlot")]
        public long TheaterSlot { get; set; }

        [JsonProperty("theaterUIOrder")]
        public long TheaterUiOrder { get; set; }

        [JsonProperty("tiles")]
        public Tile[] Tiles { get; set; }

        [JsonProperty("uniqueId")]
        public string UniqueId { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("ar", NullValueHandling = NullValueHandling.Ignore)]
        public string Ar { get; set; }

        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public string De { get; set; }

        [JsonProperty("en")]
        public string En { get; set; }

        [JsonProperty("es", NullValueHandling = NullValueHandling.Ignore)]
        public string Es { get; set; }

        [JsonProperty("es-419", NullValueHandling = NullValueHandling.Ignore)]
        public string Es419 { get; set; }

        [JsonProperty("fr", NullValueHandling = NullValueHandling.Ignore)]
        public string Fr { get; set; }

        [JsonProperty("it", NullValueHandling = NullValueHandling.Ignore)]
        public string It { get; set; }

        [JsonProperty("ja", NullValueHandling = NullValueHandling.Ignore)]
        public string Ja { get; set; }

        [JsonProperty("ko", NullValueHandling = NullValueHandling.Ignore)]
        public string Ko { get; set; }

        [JsonProperty("pl", NullValueHandling = NullValueHandling.Ignore)]
        public string Pl { get; set; }

        [JsonProperty("pt-br", NullValueHandling = NullValueHandling.Ignore)]
        public string PtBr { get; set; }

        [JsonProperty("ru", NullValueHandling = NullValueHandling.Ignore)]
        public string Ru { get; set; }

        [JsonProperty("tr", NullValueHandling = NullValueHandling.Ignore)]
        public string Tr { get; set; }

        [JsonProperty("zh", NullValueHandling = NullValueHandling.Ignore)]
        public string Zh { get; set; }

        [JsonProperty("zh-cn", NullValueHandling = NullValueHandling.Ignore)]
        public string ZhCn { get; set; }

        [JsonProperty("zh-hant", NullValueHandling = NullValueHandling.Ignore)]
        public string ZhHant { get; set; }
    }

    public partial class DisplayName
    {
        [JsonProperty("ar")]
        public string Ar { get; set; }

        [JsonProperty("de")]
        public string De { get; set; }

        [JsonProperty("en")]
        public string En { get; set; }

        [JsonProperty("es")]
        public string Es { get; set; }

        [JsonProperty("es-419")]
        public string Es419 { get; set; }

        [JsonProperty("fr")]
        public string Fr { get; set; }

        [JsonProperty("it")]
        public string It { get; set; }

        [JsonProperty("ja")]
        public string Ja { get; set; }

        [JsonProperty("ko")]
        public string Ko { get; set; }

        [JsonProperty("pl")]
        public string Pl { get; set; }

        [JsonProperty("pt-br")]
        public string PtBr { get; set; }

        [JsonProperty("ru")]
        public string Ru { get; set; }

        [JsonProperty("tr")]
        public string Tr { get; set; }

        [JsonProperty("zh-cn")]
        public string ZhCn { get; set; }

        [JsonProperty("zh-hant")]
        public string ZhHant { get; set; }
    }

    public partial class Region
    {
        [JsonProperty("displayName")]
        public DisplayName DisplayName { get; set; }

        [JsonProperty("missionAlertRequirements")]
        public MissionAlertRequirement[] MissionAlertRequirements { get; set; }

        [JsonProperty("missionData")]
        public MissionData MissionData { get; set; }

        [JsonProperty("regionTags")]
        public Tags RegionTags { get; set; }

        [JsonProperty("regionThemeIcon")]
        public SpreadDataName RegionThemeIcon { get; set; }

        [JsonProperty("requirements")]
        public MissionAlertRequirementsClass Requirements { get; set; }

        [JsonProperty("tileIndices")]
        public long[] TileIndices { get; set; }

        [JsonProperty("uniqueId")]
        public string UniqueId { get; set; }
    }

    public partial class MissionAlertRequirement
    {
        [JsonProperty("categoryName")]
        public MissionAlertRequirementCategoryName CategoryName { get; set; }

        [JsonProperty("requirements")]
        public MissionAlertRequirementsClass Requirements { get; set; }
    }

    public partial class MissionAlertRequirementsClass
    {
        [JsonProperty("activeQuestDefinitions")]
        public object[] ActiveQuestDefinitions { get; set; }

        [JsonProperty("commanderLevel")]
        public long CommanderLevel { get; set; }

        [JsonProperty("eventFlag")]
        public string EventFlag { get; set; }

        [JsonProperty("itemDefinition")]
        public SpreadDataName ItemDefinition { get; set; }

        [JsonProperty("maxPartyPowerRating")]
        public long MaxPartyPowerRating { get; set; }

        [JsonProperty("maxPersonalPowerRating")]
        public long MaxPersonalPowerRating { get; set; }

        [JsonProperty("objectiveStatHandle")]
        public MissionAlertRequirementsObjectiveStatHandle ObjectiveStatHandle { get; set; }

        [JsonProperty("partyPowerRating")]
        public long PartyPowerRating { get; set; }

        [JsonProperty("personalPowerRating")]
        public long PersonalPowerRating { get; set; }

        [JsonProperty("questDefinition")]
        public string QuestDefinition { get; set; }

        [JsonProperty("uncompletedQuestDefinition")]
        public SpreadDataName UncompletedQuestDefinition { get; set; }
    }

    public partial class MissionAlertRequirementsObjectiveStatHandle
    {
        [JsonProperty("dataTable")]
        public SpreadDataName DataTable { get; set; }

        [JsonProperty("rowName")]
        public SpreadDataName RowName { get; set; }
    }

    public partial class MissionData
    {
        [JsonProperty("difficultyWeights")]
        public DifficultyWeight[] DifficultyWeights { get; set; }

        [JsonProperty("missionChangeFrequency")]
        public double MissionChangeFrequency { get; set; }

        [JsonProperty("missionWeights")]
        public MissionWeight[] MissionWeights { get; set; }

        [JsonProperty("numMissionsAvailable")]
        public long NumMissionsAvailable { get; set; }

        [JsonProperty("numMissionsToChange")]
        public long NumMissionsToChange { get; set; }
    }

    public partial class DifficultyWeight
    {
        [JsonProperty("difficultyInfo")]
        public DifficultyInfo DifficultyInfo { get; set; }

        [JsonProperty("weight")]
        public double Weight { get; set; }
    }

    public partial class MissionWeight
    {
        [JsonProperty("missionGenerator")]
        public string MissionGenerator { get; set; }

        [JsonProperty("weight")]
        public double Weight { get; set; }
    }

    public partial class Tags
    {
        [JsonProperty("gameplayTags")]
        public Tag[] GameplayTags { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("tagName")]
        public string TagName { get; set; }
    }

    public partial class RuntimeInfo
    {
        [JsonProperty("bOnlyMatchLinkedQuestsToTiles")]
        public bool BOnlyMatchLinkedQuestsToTiles { get; set; }

        [JsonProperty("eventDependentTheaterTags")]
        public EventDependentTheaterTag[] EventDependentTheaterTags { get; set; }

        [JsonProperty("gameplayModifierList")]
        public GameplayModifierList[] GameplayModifierList { get; set; }

        [JsonProperty("missionAlertCategoryRequirements")]
        public MissionAlertCategoryRequirement[] MissionAlertCategoryRequirements { get; set; }

        [JsonProperty("missionAlertRequirements")]
        public MissionAlertRequirementsClass MissionAlertRequirements { get; set; }

        [JsonProperty("requiredSubGameForVisibility")]
        public string RequiredSubGameForVisibility { get; set; }

        [JsonProperty("requirements")]
        public MissionAlertRequirementsClass Requirements { get; set; }

        [JsonProperty("socket")]
        public string Socket { get; set; }

        [JsonProperty("theaterColorInfo")]
        public TheaterColorInfo TheaterColorInfo { get; set; }

        [JsonProperty("theaterImage")]
        public string TheaterImage { get; set; }

        [JsonProperty("theaterImages")]
        public TheaterImages TheaterImages { get; set; }

        [JsonProperty("theaterTags")]
        public Tags TheaterTags { get; set; }

        [JsonProperty("theaterType")]
        public string TheaterType { get; set; }

        [JsonProperty("theaterVisibilityRequirements")]
        public MissionAlertRequirementsClass TheaterVisibilityRequirements { get; set; }

        [JsonProperty("worldMapPinClass")]
        public string WorldMapPinClass { get; set; }
    }

    public partial class EventDependentTheaterTag
    {
        [JsonProperty("relatedTag")]
        public Tag RelatedTag { get; set; }

        [JsonProperty("requiredEventFlag")]
        public RequiredEventFlag RequiredEventFlag { get; set; }
    }

    public partial class GameplayModifierList
    {
        [JsonProperty("eventFlagName")]
        public string EventFlagName { get; set; }

        [JsonProperty("gameplayModifier")]
        public string GameplayModifier { get; set; }
    }

    public partial class MissionAlertCategoryRequirement
    {
        [JsonProperty("bAllowQuickplay")]
        public bool BAllowQuickplay { get; set; }

        [JsonProperty("bRespectTileRequirements")]
        public bool BRespectTileRequirements { get; set; }

        [JsonProperty("missionAlertCategoryName")]
        public string MissionAlertCategoryName { get; set; }
    }

    public partial class TheaterColorInfo
    {
        [JsonProperty("bUseDifficultyToDetermineColor")]
        public bool BUseDifficultyToDetermineColor { get; set; }

        [JsonProperty("color")]
        public TheaterColorInfoColor Color { get; set; }
    }

    public partial class TheaterColorInfoColor
    {
        [JsonProperty("colorUseRule")]
        public string ColorUseRule { get; set; }

        [JsonProperty("specifiedColor")]
        public PurpleSpecifiedColor SpecifiedColor { get; set; }
    }

    public partial class PurpleSpecifiedColor
    {
        [JsonProperty("a")]
        public long A { get; set; }

        [JsonProperty("b")]
        public double B { get; set; }

        [JsonProperty("g")]
        public double G { get; set; }

        [JsonProperty("r")]
        public double R { get; set; }
    }

    public partial class TheaterImages
    {
        [JsonProperty("brush_L")]
        public Brush BrushL { get; set; }

        [JsonProperty("brush_M")]
        public Brush BrushM { get; set; }

        [JsonProperty("brush_S")]
        public Brush BrushS { get; set; }

        [JsonProperty("brush_XL")]
        public Brush BrushXl { get; set; }

        [JsonProperty("brush_XS")]
        public Brush BrushXs { get; set; }

        [JsonProperty("brush_XXS")]
        public Brush BrushXxs { get; set; }
    }

    public partial class Brush
    {
        [JsonProperty("bIsDynamicallyLoaded")]
        public bool BIsDynamicallyLoaded { get; set; }

        [JsonProperty("drawAs")]
        public string DrawAs { get; set; }

        [JsonProperty("imageSize")]
        public ImageSize ImageSize { get; set; }

        [JsonProperty("imageType")]
        public string ImageType { get; set; }

        [JsonProperty("margin")]
        public Margin Margin { get; set; }

        [JsonProperty("mirroring")]
        public string Mirroring { get; set; }

        [JsonProperty("outlineSettings")]
        public OutlineSettings OutlineSettings { get; set; }

        [JsonProperty("resourceName")]
        public SpreadDataName ResourceName { get; set; }

        [JsonProperty("resourceObject")]
        public string ResourceObject { get; set; }

        [JsonProperty("tiling")]
        public string Tiling { get; set; }

        [JsonProperty("tintColor")]
        public TintColorClass TintColor { get; set; }

        [JsonProperty("uVRegion")]
        public UVRegion UVRegion { get; set; }
    }

    public partial class ImageSize
    {
        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }
    }

    public partial class Margin
    {
        [JsonProperty("bottom")]
        public long Bottom { get; set; }

        [JsonProperty("left")]
        public long Left { get; set; }

        [JsonProperty("right")]
        public long Right { get; set; }

        [JsonProperty("top")]
        public long Top { get; set; }
    }

    public partial class OutlineSettings
    {
        [JsonProperty("bUseBrushTransparency")]
        public bool BUseBrushTransparency { get; set; }

        [JsonProperty("color")]
        public TintColorClass Color { get; set; }

        [JsonProperty("cornerRadii")]
        public CornerRadii CornerRadii { get; set; }

        [JsonProperty("roundingType")]
        public string RoundingType { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class TintColorClass
    {
        [JsonProperty("colorUseRule")]
        public string ColorUseRule { get; set; }

        [JsonProperty("specifiedColor")]
        public TintColorSpecifiedColor SpecifiedColor { get; set; }
    }

    public partial class TintColorSpecifiedColor
    {
        [JsonProperty("a")]
        public long A { get; set; }

        [JsonProperty("b")]
        public long B { get; set; }

        [JsonProperty("g")]
        public long G { get; set; }

        [JsonProperty("r")]
        public long R { get; set; }
    }

    public partial class CornerRadii
    {
        [JsonProperty("w")]
        public long W { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("z")]
        public long Z { get; set; }
    }

    public partial class UVRegion
    {
        [JsonProperty("bIsValid")]
        public long BIsValid { get; set; }

        [JsonProperty("max")]
        public ImageSize Max { get; set; }

        [JsonProperty("min")]
        public ImageSize Min { get; set; }
    }

    public partial class Tile
    {
        [JsonProperty("bDisallowQuickplay")]
        public bool BDisallowQuickplay { get; set; }

        [JsonProperty("canBeMissionAlert")]
        public bool CanBeMissionAlert { get; set; }

        [JsonProperty("difficultyWeightOverrides")]
        public DifficultyWeight[] DifficultyWeightOverrides { get; set; }

        [JsonProperty("linkedQuests")]
        public LinkedQuest[] LinkedQuests { get; set; }

        [JsonProperty("missionWeightOverrides")]
        public MissionWeight[] MissionWeightOverrides { get; set; }

        [JsonProperty("requirements")]
        public TileRequirements Requirements { get; set; }

        [JsonProperty("tileTags")]
        public Tags TileTags { get; set; }

        [JsonProperty("tileType")]
        public TileType TileType { get; set; }

        [JsonProperty("xCoordinate")]
        public long XCoordinate { get; set; }

        [JsonProperty("yCoordinate")]
        public long YCoordinate { get; set; }

        [JsonProperty("zoneTheme")]
        public string ZoneTheme { get; set; }
    }

    public partial class LinkedQuest
    {
        [JsonProperty("objectiveStatHandle")]
        public LinkedQuestObjectiveStatHandle ObjectiveStatHandle { get; set; }

        [JsonProperty("questDefinition")]
        public string QuestDefinition { get; set; }
    }

    public partial class LinkedQuestObjectiveStatHandle
    {
        [JsonProperty("dataTable")]
        public string DataTable { get; set; }

        [JsonProperty("rowName")]
        public SpreadDataName RowName { get; set; }
    }

    public partial class TileRequirements
    {
        [JsonProperty("activeQuestDefinitions")]
        public string[] ActiveQuestDefinitions { get; set; }

        [JsonProperty("commanderLevel")]
        public long CommanderLevel { get; set; }

        [JsonProperty("eventFlag")]
        public EventFlag EventFlag { get; set; }

        [JsonProperty("itemDefinition")]
        public SpreadDataName ItemDefinition { get; set; }

        [JsonProperty("maxPartyPowerRating")]
        public long MaxPartyPowerRating { get; set; }

        [JsonProperty("maxPersonalPowerRating")]
        public long MaxPersonalPowerRating { get; set; }

        [JsonProperty("objectiveStatHandle")]
        public MissionAlertRequirementsObjectiveStatHandle ObjectiveStatHandle { get; set; }

        [JsonProperty("partyPowerRating")]
        public long PartyPowerRating { get; set; }

        [JsonProperty("personalPowerRating")]
        public long PersonalPowerRating { get; set; }

        [JsonProperty("questDefinition")]
        public string QuestDefinition { get; set; }

        [JsonProperty("uncompletedQuestDefinition")]
        public SpreadDataName UncompletedQuestDefinition { get; set; }
    }

    public enum AvailableMissionAlertCategoryName { DudebroCategory, MegaAlertCategory, MegaAlertCategoryLightning, MegaAlertCategoryPhoenix, MegaAlertCategoryPhoenixLightning, StormFirePassive, StormIcePassive, StormLightningActive, StormMinibossPassive, StormMutantStonewoodActive, StormPhoenixFirePassive, StormPhoenixIcePassive, StormPhoenixLightningActive, StormPhoenixMinibossPassive, StormPhoenixNoviceActive };

    public enum SpreadDataName { CompleteGate2_Diff4, CompleteGateDouble2_Diff4, None };

    public enum MissionAlertRequirementCategoryName { StormCategory };

    public enum RequiredEventFlag { EventFlagAnniversaryEnableEnemyVariants, EventFlagFortnitemaresEnableEnemyVariants, EventFlagLoveStormEnableEnemyVariants, EventFlagWinterFestEnableEnemyVariants };

    public enum EventFlag { Empty, EventFlagBetaStormsB, EventFlagHordeV3Week02, EventFlagHordeV3Week03, EventFlagHordeV3Week04, EventFlagHordeV3Week05, EventFlagHordeV3Week06, EventFlagStarlightQuestsD5Science, EventFlagStarlightQuestsPhase1, EventFlagStarlightQuestsPhase2, EventFlagStarlightQuestsPhase3, EventFlagStarlightQuestsPhase4 };

    public enum TileType { AlwaysActive, CriticalMission, NonMission, Normal, Outpost };

    public partial class Output
    {
        public static Output FromJson(string json) => JsonConvert.DeserializeObject<Output>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Output self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AvailableMissionAlertCategoryNameConverter.Singleton,
                SpreadDataNameConverter.Singleton,
                MissionAlertRequirementCategoryNameConverter.Singleton,
                RequiredEventFlagConverter.Singleton,
                EventFlagConverter.Singleton,
                TileTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AvailableMissionAlertCategoryNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvailableMissionAlertCategoryName) || t == typeof(AvailableMissionAlertCategoryName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DudebroCategory":
                    return AvailableMissionAlertCategoryName.DudebroCategory;
                case "MegaAlertCategory":
                    return AvailableMissionAlertCategoryName.MegaAlertCategory;
                case "MegaAlertCategory_Lightning":
                    return AvailableMissionAlertCategoryName.MegaAlertCategoryLightning;
                case "MegaAlertCategory_Phoenix":
                    return AvailableMissionAlertCategoryName.MegaAlertCategoryPhoenix;
                case "MegaAlertCategory_Phoenix_Lightning":
                    return AvailableMissionAlertCategoryName.MegaAlertCategoryPhoenixLightning;
                case "Storm_FirePassive":
                    return AvailableMissionAlertCategoryName.StormFirePassive;
                case "Storm_IcePassive":
                    return AvailableMissionAlertCategoryName.StormIcePassive;
                case "Storm_LightningActive":
                    return AvailableMissionAlertCategoryName.StormLightningActive;
                case "Storm_MinibossPassive":
                    return AvailableMissionAlertCategoryName.StormMinibossPassive;
                case "Storm_MutantStonewoodActive":
                    return AvailableMissionAlertCategoryName.StormMutantStonewoodActive;
                case "Storm_Phoenix_FirePassive":
                    return AvailableMissionAlertCategoryName.StormPhoenixFirePassive;
                case "Storm_Phoenix_IcePassive":
                    return AvailableMissionAlertCategoryName.StormPhoenixIcePassive;
                case "Storm_Phoenix_LightningActive":
                    return AvailableMissionAlertCategoryName.StormPhoenixLightningActive;
                case "Storm_Phoenix_MinibossPassive":
                    return AvailableMissionAlertCategoryName.StormPhoenixMinibossPassive;
                case "Storm_Phoenix_NoviceActive":
                    return AvailableMissionAlertCategoryName.StormPhoenixNoviceActive;
            }
            throw new Exception("Cannot unmarshal type AvailableMissionAlertCategoryName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvailableMissionAlertCategoryName)untypedValue;
            switch (value)
            {
                case AvailableMissionAlertCategoryName.DudebroCategory:
                    serializer.Serialize(writer, "DudebroCategory");
                    return;
                case AvailableMissionAlertCategoryName.MegaAlertCategory:
                    serializer.Serialize(writer, "MegaAlertCategory");
                    return;
                case AvailableMissionAlertCategoryName.MegaAlertCategoryLightning:
                    serializer.Serialize(writer, "MegaAlertCategory_Lightning");
                    return;
                case AvailableMissionAlertCategoryName.MegaAlertCategoryPhoenix:
                    serializer.Serialize(writer, "MegaAlertCategory_Phoenix");
                    return;
                case AvailableMissionAlertCategoryName.MegaAlertCategoryPhoenixLightning:
                    serializer.Serialize(writer, "MegaAlertCategory_Phoenix_Lightning");
                    return;
                case AvailableMissionAlertCategoryName.StormFirePassive:
                    serializer.Serialize(writer, "Storm_FirePassive");
                    return;
                case AvailableMissionAlertCategoryName.StormIcePassive:
                    serializer.Serialize(writer, "Storm_IcePassive");
                    return;
                case AvailableMissionAlertCategoryName.StormLightningActive:
                    serializer.Serialize(writer, "Storm_LightningActive");
                    return;
                case AvailableMissionAlertCategoryName.StormMinibossPassive:
                    serializer.Serialize(writer, "Storm_MinibossPassive");
                    return;
                case AvailableMissionAlertCategoryName.StormMutantStonewoodActive:
                    serializer.Serialize(writer, "Storm_MutantStonewoodActive");
                    return;
                case AvailableMissionAlertCategoryName.StormPhoenixFirePassive:
                    serializer.Serialize(writer, "Storm_Phoenix_FirePassive");
                    return;
                case AvailableMissionAlertCategoryName.StormPhoenixIcePassive:
                    serializer.Serialize(writer, "Storm_Phoenix_IcePassive");
                    return;
                case AvailableMissionAlertCategoryName.StormPhoenixLightningActive:
                    serializer.Serialize(writer, "Storm_Phoenix_LightningActive");
                    return;
                case AvailableMissionAlertCategoryName.StormPhoenixMinibossPassive:
                    serializer.Serialize(writer, "Storm_Phoenix_MinibossPassive");
                    return;
                case AvailableMissionAlertCategoryName.StormPhoenixNoviceActive:
                    serializer.Serialize(writer, "Storm_Phoenix_NoviceActive");
                    return;
            }
            throw new Exception("Cannot marshal type AvailableMissionAlertCategoryName");
        }

        public static readonly AvailableMissionAlertCategoryNameConverter Singleton = new AvailableMissionAlertCategoryNameConverter();
    }

    internal class SpreadDataNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SpreadDataName) || t == typeof(SpreadDataName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "None":
                    return SpreadDataName.None;
                case "complete_gate_2_diff4":
                    return SpreadDataName.CompleteGate2_Diff4;
                case "complete_gate_double_2_diff4":
                    return SpreadDataName.CompleteGateDouble2_Diff4;
            }
            throw new Exception("Cannot unmarshal type SpreadDataName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SpreadDataName)untypedValue;
            switch (value)
            {
                case SpreadDataName.None:
                    serializer.Serialize(writer, "None");
                    return;
                case SpreadDataName.CompleteGate2_Diff4:
                    serializer.Serialize(writer, "complete_gate_2_diff4");
                    return;
                case SpreadDataName.CompleteGateDouble2_Diff4:
                    serializer.Serialize(writer, "complete_gate_double_2_diff4");
                    return;
            }
            throw new Exception("Cannot marshal type SpreadDataName");
        }

        public static readonly SpreadDataNameConverter Singleton = new SpreadDataNameConverter();
    }

    internal class MissionAlertRequirementCategoryNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MissionAlertRequirementCategoryName) || t == typeof(MissionAlertRequirementCategoryName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "StormCategory")
            {
                return MissionAlertRequirementCategoryName.StormCategory;
            }
            throw new Exception("Cannot unmarshal type MissionAlertRequirementCategoryName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MissionAlertRequirementCategoryName)untypedValue;
            if (value == MissionAlertRequirementCategoryName.StormCategory)
            {
                serializer.Serialize(writer, "StormCategory");
                return;
            }
            throw new Exception("Cannot marshal type MissionAlertRequirementCategoryName");
        }

        public static readonly MissionAlertRequirementCategoryNameConverter Singleton = new MissionAlertRequirementCategoryNameConverter();
    }

    internal class RequiredEventFlagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RequiredEventFlag) || t == typeof(RequiredEventFlag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EventFlag.Anniversary.EnableEnemyVariants":
                    return RequiredEventFlag.EventFlagAnniversaryEnableEnemyVariants;
                case "EventFlag.Fortnitemares.EnableEnemyVariants":
                    return RequiredEventFlag.EventFlagFortnitemaresEnableEnemyVariants;
                case "EventFlag.LoveStorm.EnableEnemyVariants":
                    return RequiredEventFlag.EventFlagLoveStormEnableEnemyVariants;
                case "EventFlag.WinterFest.EnableEnemyVariants":
                    return RequiredEventFlag.EventFlagWinterFestEnableEnemyVariants;
            }
            throw new Exception("Cannot unmarshal type RequiredEventFlag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RequiredEventFlag)untypedValue;
            switch (value)
            {
                case RequiredEventFlag.EventFlagAnniversaryEnableEnemyVariants:
                    serializer.Serialize(writer, "EventFlag.Anniversary.EnableEnemyVariants");
                    return;
                case RequiredEventFlag.EventFlagFortnitemaresEnableEnemyVariants:
                    serializer.Serialize(writer, "EventFlag.Fortnitemares.EnableEnemyVariants");
                    return;
                case RequiredEventFlag.EventFlagLoveStormEnableEnemyVariants:
                    serializer.Serialize(writer, "EventFlag.LoveStorm.EnableEnemyVariants");
                    return;
                case RequiredEventFlag.EventFlagWinterFestEnableEnemyVariants:
                    serializer.Serialize(writer, "EventFlag.WinterFest.EnableEnemyVariants");
                    return;
            }
            throw new Exception("Cannot marshal type RequiredEventFlag");
        }

        public static readonly RequiredEventFlagConverter Singleton = new RequiredEventFlagConverter();
    }

    internal class EventFlagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EventFlag) || t == typeof(EventFlag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return EventFlag.Empty;
                case "EventFlag.BetaStorms.B":
                    return EventFlag.EventFlagBetaStormsB;
                case "EventFlag.HordeV3.Week02":
                    return EventFlag.EventFlagHordeV3Week02;
                case "EventFlag.HordeV3.Week03":
                    return EventFlag.EventFlagHordeV3Week03;
                case "EventFlag.HordeV3.Week04":
                    return EventFlag.EventFlagHordeV3Week04;
                case "EventFlag.HordeV3.Week05":
                    return EventFlag.EventFlagHordeV3Week05;
                case "EventFlag.HordeV3.Week06":
                    return EventFlag.EventFlagHordeV3Week06;
                case "EventFlag.Starlight.Quests.D5Science":
                    return EventFlag.EventFlagStarlightQuestsD5Science;
                case "EventFlag.Starlight.Quests.Phase1":
                    return EventFlag.EventFlagStarlightQuestsPhase1;
                case "EventFlag.Starlight.Quests.Phase2":
                    return EventFlag.EventFlagStarlightQuestsPhase2;
                case "EventFlag.Starlight.Quests.Phase3":
                    return EventFlag.EventFlagStarlightQuestsPhase3;
                case "EventFlag.Starlight.Quests.Phase4":
                    return EventFlag.EventFlagStarlightQuestsPhase4;
            }
            throw new Exception("Cannot unmarshal type EventFlag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EventFlag)untypedValue;
            switch (value)
            {
                case EventFlag.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case EventFlag.EventFlagBetaStormsB:
                    serializer.Serialize(writer, "EventFlag.BetaStorms.B");
                    return;
                case EventFlag.EventFlagHordeV3Week02:
                    serializer.Serialize(writer, "EventFlag.HordeV3.Week02");
                    return;
                case EventFlag.EventFlagHordeV3Week03:
                    serializer.Serialize(writer, "EventFlag.HordeV3.Week03");
                    return;
                case EventFlag.EventFlagHordeV3Week04:
                    serializer.Serialize(writer, "EventFlag.HordeV3.Week04");
                    return;
                case EventFlag.EventFlagHordeV3Week05:
                    serializer.Serialize(writer, "EventFlag.HordeV3.Week05");
                    return;
                case EventFlag.EventFlagHordeV3Week06:
                    serializer.Serialize(writer, "EventFlag.HordeV3.Week06");
                    return;
                case EventFlag.EventFlagStarlightQuestsD5Science:
                    serializer.Serialize(writer, "EventFlag.Starlight.Quests.D5Science");
                    return;
                case EventFlag.EventFlagStarlightQuestsPhase1:
                    serializer.Serialize(writer, "EventFlag.Starlight.Quests.Phase1");
                    return;
                case EventFlag.EventFlagStarlightQuestsPhase2:
                    serializer.Serialize(writer, "EventFlag.Starlight.Quests.Phase2");
                    return;
                case EventFlag.EventFlagStarlightQuestsPhase3:
                    serializer.Serialize(writer, "EventFlag.Starlight.Quests.Phase3");
                    return;
                case EventFlag.EventFlagStarlightQuestsPhase4:
                    serializer.Serialize(writer, "EventFlag.Starlight.Quests.Phase4");
                    return;
            }
            throw new Exception("Cannot marshal type EventFlag");
        }

        public static readonly EventFlagConverter Singleton = new EventFlagConverter();
    }

    internal class TileTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TileType) || t == typeof(TileType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AlwaysActive":
                    return TileType.AlwaysActive;
                case "CriticalMission":
                    return TileType.CriticalMission;
                case "NonMission":
                    return TileType.NonMission;
                case "Normal":
                    return TileType.Normal;
                case "Outpost":
                    return TileType.Outpost;
            }
            throw new Exception("Cannot unmarshal type TileType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TileType)untypedValue;
            switch (value)
            {
                case TileType.AlwaysActive:
                    serializer.Serialize(writer, "AlwaysActive");
                    return;
                case TileType.CriticalMission:
                    serializer.Serialize(writer, "CriticalMission");
                    return;
                case TileType.NonMission:
                    serializer.Serialize(writer, "NonMission");
                    return;
                case TileType.Normal:
                    serializer.Serialize(writer, "Normal");
                    return;
                case TileType.Outpost:
                    serializer.Serialize(writer, "Outpost");
                    return;
            }
            throw new Exception("Cannot marshal type TileType");
        }

        public static readonly TileTypeConverter Singleton = new TileTypeConverter();
    }
}
